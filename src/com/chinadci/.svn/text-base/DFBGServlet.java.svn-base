package com.chinadci;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public class DFBGServlet extends HttpServlet {

	private static final long serialVersionUID = 6334870015463981166L;

	public DFBGServlet() {
		super();

	}

	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
		// Put your code here
	}

	/**
	 * The doGet method of the servlet. <br>
	 * 
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// Connection con =null;
		// // Statement stmt = null;
		// // ResultSet rs = null;
		PrintWriter out = response.getWriter();
		// //// response.setContentType("text/html");
		// // String owe = request.getParameter("ower");
		// // String time=request.getParameter("time");
		// // String lon=request.getParameter("lon");
		// // String lat=request.getParameter("lat");
		// try {
		// //string
		// str1="jdbc:oracle:thin:@localhost:1521:AOOPLE","scott","tiger";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// con =
		// DriverManager.getConnection("jdbc:oracle:thin:@192.168.225.178:1521:szlh","gisdb","gisdb");
		// // stmt = con.createStatement();
		// // String
		// sql="INSERT INTO ANDROID_CS VALUES ("+owe+","+time+","+lat+","+lon+",)";
		// // stmt.executeUpdate(sql);
		// } catch (SQLException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// out.println(e.toString());
		// } catch (Exception e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		out.println("fdyrt");
		// try {
		// con.close();
		// } catch (SQLException e) {
		// e.printStackTrace();
		// }
		// out.flush();
		// out.close();
		// doPost(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 * 
	 * This method is called when a form has its tag value method equals to
	 * post.
	 * 
	 * @param request
	 *            the request send by the client to the server
	 * @param response
	 *            the response send by the server to the client
	 * @throws ServletException
	 *             if an error occurred
	 * @throws IOException
	 *             if an error occurred
	 */

	@SuppressWarnings("unchecked")
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8"); // 设置输入编码格式
		request.setAttribute("Content-Type", "multipart/form-data");
		response.setContentType("text/html;charset=utf-8");
		response.setCharacterEncoding("utf-8");
		// String text1 = "11";
		// response.sendRedirect("result.jsp?text1=" + text1);

		Connection con = null;
		PreparedStatement psmt = null;
		PreparedStatement psmt1 = null;
		// ResultSet rs = null;
		PrintWriter out = response.getWriter();
		Dictionary<String, String> list = new Hashtable<String, String>();
		// response.setContentType("text/html");
		String bh=null;
		try {

			//
			//
			Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
			con = DriverManager.getConnection(ConfigManager.getInstance().getString("jdbcs"),ConfigManager.getInstance().getString("user"),ConfigManager.getInstance().getString("password"));
			
			Date date = new Date(System.currentTimeMillis());
		     SimpleDateFormat Forma = new SimpleDateFormat(  
	                 "yyyyMMdd-HHmmss");
		     String time=Forma.format(date);
		    String  nf=time.substring(2,4);
		    String sql="select Max(bh) from tab_yw_rcxcywb where bh >='巡检 "+nf+"-000' and bh< '巡检 "+nf+"-999'"; 
		    System.out.println("sql=" + sql);
			Statement st=con.createStatement();
			ResultSet rs=st.executeQuery(sql);
			int sl=0;
			if(rs.getRow()>=0)
			{    rs.next();
				 String bbb=rs.getNString("Max(bh)");
				 if(bbb!=null)
				 {
				 String ibh=bbb.substring(bbb.lastIndexOf("-")+1);
			     sl=Integer.parseInt(ibh);}
			}
			bh="巡检 "+nf+"-"+getformat(sl+1);
			rs.close();
			st.close();
			String temp = request.getSession().getServletContext()
					.getRealPath("/")
					+ "temp"; // 临时目录
			System.out.println("temp=" + temp);
			String loadpath = request.getSession().getServletContext()
					.getRealPath("/")
					+ "Image"; // 上传文件存放目录
             File ff=new File(temp+"\\");
               if(!ff.exists())
                     {
            	   ff.mkdirs();
                     }
			List<File> images = new ArrayList<File>();

			DiskFileItemFactory factory = new DiskFileItemFactory();
			// 设置内存缓冲区的域值
			factory.setSizeThreshold(1024);

			// 设置当内容大于内存缓冲区的域值时，设置文件的存储位置。
			factory.setRepository(new File(temp));
			ServletFileUpload upload = new ServletFileUpload(factory);

			// 设置上传文件的最大值。
			upload.setSizeMax(10000000);

			List<File> fileItems = null;
			fileItems = upload.parseRequest(request);
			// 传过来两个文件，第一个文件是一个简单的文本文件；第二个文
			// 不知道大小并且将写到服务器中。
			if (fileItems != null) {
				Iterator<File> iterator = fileItems.iterator();
				while (iterator.hasNext()) {
					FileItem fileItem = (FileItem) iterator.next();		
					// 判断是否是文件域的表单信息.
					if (!fileItem.isFormField()) {
						System.out.println(bh);
						// 获取上传的文件名(包括路径)
						String fileName = fileItem.getName();
						long size = fileItem.getSize();
						System.out.println("fileName: " + fileName);
						System.out.println("size: " + size);

						int index = fileName.lastIndexOf(File.separator);
						if (index > 0) {
							fileName = fileName.substring(index + 1,
									fileName.length());
						}

						File toFile = null;
						String path=loadpath + '\\'+bh+'\\';
						System.out.println(path);
						// 打开文件
						toFile = new File(path, fileName);
						// 当文件不存在时创建文件.
						if (!toFile.exists()) {
							// 创建文件前,先看是否存在目录.先获取目录.
							File dir = toFile.getParentFile();
							// 当目录不存在时,创建目录.
							if (!dir.exists()) {
								dir.mkdirs();
							}
							// 有了目录后再创建文件,这样就不会创建文件失败.
							toFile.createNewFile();
						}
						// 写文件
						try {
							fileItem.write(toFile);
							psmt1 = con.prepareStatement("INSERT INTO tab_yw_xcfjb(id,bh,zpmc) VALUES (fjid.nextval,?,?)");
							psmt1.setString(1, bh);
							psmt1.setString(2, fileName);
							
							Boolean result1 = psmt1.execute();
							System.out.println(result1);
							con.commit();
							psmt1.close();
							System.out.println("上传成功 ");
							images.add(toFile);
						} catch (Exception ex1) {
							System.out.println("上传失败 ");
							ex1.printStackTrace();
						}
					} else {

						System.out.println("表单数据的 名称："
								+ fileItem.getFieldName() + "   表单数据的内容"
								+ fileItem.getString("UTF-8"));
						list.put(fileItem.getFieldName(),
								fileItem.getString("UTF-8"));
					}

				}
			}

			
			System.out.println(bh);
			// String bh=request.getParameter("bh");
			String sj = list.get("sj");
			String ycqkmc = list.get("ycqkmc");
			String yzcd = list.get("yzcd");
			String ycqkbw = list.get("ycqkbw");
			String dlwz = list.get("dlwz");
			String ssxngc = list.get("ssxngc");
			String tbzhfwl = list.get("tbzhfwl");
			String tbzhfwr = list.get("tbzhfwr");
			String gczhfwl = list.get("gczhfwl");
			String gczhfwr = list.get("gczhfwr");
			String ycdddmjgxs = list.get("ycdddmjgxs");
			String ms = list.get("ms");
			String yyfx = list.get("yyfx");
			String jy = list.get("jy");
			String xdy = list.get("xdy");
			String xdzz = list.get("xpsm");

			psmt = con
					.prepareStatement("INSERT INTO TAB_YW_RCXCYWB(id,bh, sj, ycqkmc, yzcd, ycqkbw, dlwz, ssxmgc, tzbhqdfw, tzbhzdfw, gcbhqdfw, gcbhzdfw, ycdddmjgxs, ms, yyfx, jy, xdy, xdzz) VALUES (xcbgid.nextval,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
			psmt.setString(1, bh);
			  SimpleDateFormat Format = new SimpleDateFormat(  
		                 "yyyy年MM月dd日");
			  Date dddd=Format.parse(sj);
			psmt.setDate(2,new java.sql.Date(dddd.getTime()));
			psmt.setString(3, ycqkmc);
			psmt.setString(4, yzcd);
			psmt.setString(5, ycqkbw);
			psmt.setString(6, dlwz);
			psmt.setString(7, ssxngc);
			psmt.setString(8, tbzhfwl);
			psmt.setString(9, tbzhfwr);
			psmt.setString(10, gczhfwl);
			psmt.setString(11, gczhfwr);
			psmt.setString(12, ycdddmjgxs);
			psmt.setString(13, ms);
			psmt.setString(14, yyfx);
			psmt.setString(15, jy);
			psmt.setString(16, xdy);
			psmt.setString(17, xdzz);
			
		    psmt.execute();
			con.commit();
			
//			InputStream exp1 = getInputStream(images, 1);
//			InputStream exp2 = getInputStream(images, 2);
//			InputStream exp3 = getInputStream(images, 3);
//			InputStream exp4 = getInputStream(images, 4);
//			InputStream exp5 = getInputStream(images, 5);
//			psmt1 = con
//					.prepareStatement("INSERT INTO ANDROID_IMAGE VALUES (?,?,?,?,?,?,?,?,?,?,?,?)");
//			psmt1.setString(1, bh);
//			psmt1.setString(2, xp1);
//			psmt1.setString(4, xp2);
//			psmt1.setString(6, xp3);
//			psmt1.setString(8, xp4);
//			psmt1.setString(10, xp5);
//			psmt1.setString(12, xpsm);
//			psmt1.setBlob(3, exp1);
//			psmt1.setBlob(5, exp2);
//			psmt1.setBlob(7, exp3);
//			psmt1.setBlob(9, exp4);
//			psmt1.setBlob(11, exp5);
//			Boolean result1 = psmt1.execute();
//			con.commit();
			
			out.println(bh);
			out.flush();
			out.close();
		} catch (FileUploadException ex) {
			// System.out.println(ex.toString());
			ex.printStackTrace();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			out.println(false);

		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			out.println(false);
			e.printStackTrace();
		
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			out.println(e.toString());
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			// out.println(e.toString());
			System.out.println(e.toString());
			e.printStackTrace();
			System.out.println(e.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			// out.println(e.toString());
			System.out.println(e.toString());
			e.printStackTrace();
			System.out.println(e.toString());
		} finally {
			try {
				if (psmt != null)
					psmt.close();
//				if (psmt1 != null)
//					psmt1.close();
				if (con != null)
					con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				out.println(e.toString());
				e.printStackTrace();
			}
		}

	}

	public InputStream getInputStream(List<File> images, int n)
			throws FileNotFoundException {
		if (images.size() >= n) {
			File f = images.get(images.size() -n );
			InputStream s = new FileInputStream(f);
			return s;
		}
		return null;

	}
public String getformat(int i)
{
	if(i>0&&i<10)
	{
		return "00"+i;
	}
	if(i>9&&i<100)
	{
		return "0"+i;
	}
	return i+"";
	
}
	/**
	 * Initialization of the servlet. <br>
	 * 
	 * @throws ServletException
	 *             if an error occurs
	 */
	public void init() throws ServletException {
		// Put your code here
	}

}
